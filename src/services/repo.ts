/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Repository {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:7071/api";
    }

    /**
     * @return The OK response
     */
    function1(): Promise<ClansDetails> {
        let url_ = this.baseUrl + "/Function1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFunction1(_response);
        });
    }

    protected processFunction1(response: Response): Promise<ClansDetails> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClansDetails.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClansDetails>(<any>null);
    }
}

export class ClanBadgeUrls implements IClanBadgeUrls {
    small?: string | undefined;
    large?: string | undefined;
    medium?: string | undefined;

    constructor(data?: IClanBadgeUrls) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.small = _data["small"];
            this.large = _data["large"];
            this.medium = _data["medium"];
        }
    }

    static fromJS(data: any): ClanBadgeUrls {
        data = typeof data === 'object' ? data : {};
        let result = new ClanBadgeUrls();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["small"] = this.small;
        data["large"] = this.large;
        data["medium"] = this.medium;
        return data;
    }
}

export interface IClanBadgeUrls {
    small?: string | undefined;
    large?: string | undefined;
    medium?: string | undefined;
}

export class ClanCapital implements IClanCapital {
    capitalHallLevel?: number | undefined;
    districts?: ClanCapitalDistrict[] | undefined;

    constructor(data?: IClanCapital) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.capitalHallLevel = _data["capitalHallLevel"];
            if (Array.isArray(_data["districts"])) {
                this.districts = [] as any;
                for (let item of _data["districts"])
                    this.districts!.push(ClanCapitalDistrict.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClanCapital {
        data = typeof data === 'object' ? data : {};
        let result = new ClanCapital();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capitalHallLevel"] = this.capitalHallLevel;
        if (Array.isArray(this.districts)) {
            data["districts"] = [];
            for (let item of this.districts)
                data["districts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClanCapital {
    capitalHallLevel?: number | undefined;
    districts?: ClanCapitalDistrict[] | undefined;
}

export class ClanCapitalDistrict implements IClanCapitalDistrict {
    id?: number | undefined;
    name?: string | undefined;
    districtHallLevel?: number | undefined;

    constructor(data?: IClanCapitalDistrict) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.districtHallLevel = _data["districtHallLevel"];
        }
    }

    static fromJS(data: any): ClanCapitalDistrict {
        data = typeof data === 'object' ? data : {};
        let result = new ClanCapitalDistrict();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["districtHallLevel"] = this.districtHallLevel;
        return data;
    }
}

export interface IClanCapitalDistrict {
    id?: number | undefined;
    name?: string | undefined;
    districtHallLevel?: number | undefined;
}

export class ClanChatLanguage implements IClanChatLanguage {
    id?: number | undefined;
    name?: string | undefined;
    languageCode?: string | undefined;

    constructor(data?: IClanChatLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.languageCode = _data["languageCode"];
        }
    }

    static fromJS(data: any): ClanChatLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new ClanChatLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["languageCode"] = this.languageCode;
        return data;
    }
}

export interface IClanChatLanguage {
    id?: number | undefined;
    name?: string | undefined;
    languageCode?: string | undefined;
}

export class ClanLabel implements IClanLabel {
    id?: number | undefined;
    name?: string | undefined;
    iconsUrl?: ClanLabelIcons | undefined;

    constructor(data?: IClanLabel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.iconsUrl = _data["iconsUrl"] ? ClanLabelIcons.fromJS(_data["iconsUrl"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClanLabel {
        data = typeof data === 'object' ? data : {};
        let result = new ClanLabel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["iconsUrl"] = this.iconsUrl ? this.iconsUrl.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClanLabel {
    id?: number | undefined;
    name?: string | undefined;
    iconsUrl?: ClanLabelIcons | undefined;
}

export class ClanLabelIcons implements IClanLabelIcons {
    small?: string | undefined;
    medium?: string | undefined;

    constructor(data?: IClanLabelIcons) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.small = _data["small"];
            this.medium = _data["medium"];
        }
    }

    static fromJS(data: any): ClanLabelIcons {
        data = typeof data === 'object' ? data : {};
        let result = new ClanLabelIcons();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["small"] = this.small;
        data["medium"] = this.medium;
        return data;
    }
}

export interface IClanLabelIcons {
    small?: string | undefined;
    medium?: string | undefined;
}

export class ClanLocation implements IClanLocation {
    id?: number | undefined;
    name?: string | undefined;
    isCountry?: boolean | undefined;
    countryCode?: string | undefined;

    constructor(data?: IClanLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isCountry = _data["isCountry"];
            this.countryCode = _data["countryCode"];
        }
    }

    static fromJS(data: any): ClanLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ClanLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isCountry"] = this.isCountry;
        data["countryCode"] = this.countryCode;
        return data;
    }
}

export interface IClanLocation {
    id?: number | undefined;
    name?: string | undefined;
    isCountry?: boolean | undefined;
    countryCode?: string | undefined;
}

export class ClanMember implements IClanMember {
    tag?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    expLevel?: number | undefined;
    league?: ClanMemberLeague | undefined;
    trophies?: number | undefined;
    versusTrophies?: number | undefined;
    clanRank?: number | undefined;
    previousClanRank?: number | undefined;
    donations?: number | undefined;
    donationsReceived?: number | undefined;

    constructor(data?: IClanMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"];
            this.name = _data["name"];
            this.role = _data["role"];
            this.expLevel = _data["expLevel"];
            this.league = _data["league"] ? ClanMemberLeague.fromJS(_data["league"]) : <any>undefined;
            this.trophies = _data["trophies"];
            this.versusTrophies = _data["versusTrophies"];
            this.clanRank = _data["clanRank"];
            this.previousClanRank = _data["previousClanRank"];
            this.donations = _data["donations"];
            this.donationsReceived = _data["donationsReceived"];
        }
    }

    static fromJS(data: any): ClanMember {
        data = typeof data === 'object' ? data : {};
        let result = new ClanMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        data["name"] = this.name;
        data["role"] = this.role;
        data["expLevel"] = this.expLevel;
        data["league"] = this.league ? this.league.toJSON() : <any>undefined;
        data["trophies"] = this.trophies;
        data["versusTrophies"] = this.versusTrophies;
        data["clanRank"] = this.clanRank;
        data["previousClanRank"] = this.previousClanRank;
        data["donations"] = this.donations;
        data["donationsReceived"] = this.donationsReceived;
        return data;
    }
}

export interface IClanMember {
    tag?: string | undefined;
    name?: string | undefined;
    role?: string | undefined;
    expLevel?: number | undefined;
    league?: ClanMemberLeague | undefined;
    trophies?: number | undefined;
    versusTrophies?: number | undefined;
    clanRank?: number | undefined;
    previousClanRank?: number | undefined;
    donations?: number | undefined;
    donationsReceived?: number | undefined;
}

export class ClanMemberLeague implements IClanMemberLeague {
    id?: number | undefined;
    name?: string | undefined;
    iconUrls?: ClanMemberLeagueIcon | undefined;

    constructor(data?: IClanMemberLeague) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.iconUrls = _data["iconUrls"] ? ClanMemberLeagueIcon.fromJS(_data["iconUrls"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClanMemberLeague {
        data = typeof data === 'object' ? data : {};
        let result = new ClanMemberLeague();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["iconUrls"] = this.iconUrls ? this.iconUrls.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClanMemberLeague {
    id?: number | undefined;
    name?: string | undefined;
    iconUrls?: ClanMemberLeagueIcon | undefined;
}

export class ClanMemberLeagueIcon implements IClanMemberLeagueIcon {
    small?: string | undefined;
    tiny?: string | undefined;
    medium?: string | undefined;

    constructor(data?: IClanMemberLeagueIcon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.small = _data["small"];
            this.tiny = _data["tiny"];
            this.medium = _data["medium"];
        }
    }

    static fromJS(data: any): ClanMemberLeagueIcon {
        data = typeof data === 'object' ? data : {};
        let result = new ClanMemberLeagueIcon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["small"] = this.small;
        data["tiny"] = this.tiny;
        data["medium"] = this.medium;
        return data;
    }
}

export interface IClanMemberLeagueIcon {
    small?: string | undefined;
    tiny?: string | undefined;
    medium?: string | undefined;
}

export class ClansDetails implements IClansDetails {
    tag?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    description?: string | undefined;
    location?: ClanLocation | undefined;
    badgeUrls?: ClanBadgeUrls | undefined;
    clanLevel?: number | undefined;
    clanPoints?: number | undefined;
    clanVersusPoints?: number | undefined;
    requiredTrophies?: number | undefined;
    warFrequency?: string | undefined;
    warWinStreak?: string | undefined;
    warWins?: number | undefined;
    isWarLogPublic?: string | undefined;
    warLeague?: ClanWarLeague | undefined;
    members?: number | undefined;
    memberList?: ClanMember[] | undefined;
    labels?: ClanLabel[] | undefined;
    requiredVersusTrophies?: number | undefined;
    requiredTownhallLevel?: number | undefined;
    clanCapital?: ClanCapital | undefined;
    chatLanguage?: ClanChatLanguage | undefined;

    constructor(data?: IClansDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.location = _data["location"] ? ClanLocation.fromJS(_data["location"]) : <any>undefined;
            this.badgeUrls = _data["badgeUrls"] ? ClanBadgeUrls.fromJS(_data["badgeUrls"]) : <any>undefined;
            this.clanLevel = _data["clanLevel"];
            this.clanPoints = _data["clanPoints"];
            this.clanVersusPoints = _data["clanVersusPoints"];
            this.requiredTrophies = _data["requiredTrophies"];
            this.warFrequency = _data["warFrequency"];
            this.warWinStreak = _data["warWinStreak"];
            this.warWins = _data["warWins"];
            this.isWarLogPublic = _data["isWarLogPublic"];
            this.warLeague = _data["warLeague"] ? ClanWarLeague.fromJS(_data["warLeague"]) : <any>undefined;
            this.members = _data["members"];
            if (Array.isArray(_data["memberList"])) {
                this.memberList = [] as any;
                for (let item of _data["memberList"])
                    this.memberList!.push(ClanMember.fromJS(item));
            }
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels!.push(ClanLabel.fromJS(item));
            }
            this.requiredVersusTrophies = _data["requiredVersusTrophies"];
            this.requiredTownhallLevel = _data["requiredTownhallLevel"];
            this.clanCapital = _data["clanCapital"] ? ClanCapital.fromJS(_data["clanCapital"]) : <any>undefined;
            this.chatLanguage = _data["chatLanguage"] ? ClanChatLanguage.fromJS(_data["chatLanguage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClansDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ClansDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        data["name"] = this.name;
        data["type"] = this.type;
        data["description"] = this.description;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["badgeUrls"] = this.badgeUrls ? this.badgeUrls.toJSON() : <any>undefined;
        data["clanLevel"] = this.clanLevel;
        data["clanPoints"] = this.clanPoints;
        data["clanVersusPoints"] = this.clanVersusPoints;
        data["requiredTrophies"] = this.requiredTrophies;
        data["warFrequency"] = this.warFrequency;
        data["warWinStreak"] = this.warWinStreak;
        data["warWins"] = this.warWins;
        data["isWarLogPublic"] = this.isWarLogPublic;
        data["warLeague"] = this.warLeague ? this.warLeague.toJSON() : <any>undefined;
        data["members"] = this.members;
        if (Array.isArray(this.memberList)) {
            data["memberList"] = [];
            for (let item of this.memberList)
                data["memberList"].push(item.toJSON());
        }
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item.toJSON());
        }
        data["requiredVersusTrophies"] = this.requiredVersusTrophies;
        data["requiredTownhallLevel"] = this.requiredTownhallLevel;
        data["clanCapital"] = this.clanCapital ? this.clanCapital.toJSON() : <any>undefined;
        data["chatLanguage"] = this.chatLanguage ? this.chatLanguage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClansDetails {
    tag?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    description?: string | undefined;
    location?: ClanLocation | undefined;
    badgeUrls?: ClanBadgeUrls | undefined;
    clanLevel?: number | undefined;
    clanPoints?: number | undefined;
    clanVersusPoints?: number | undefined;
    requiredTrophies?: number | undefined;
    warFrequency?: string | undefined;
    warWinStreak?: string | undefined;
    warWins?: number | undefined;
    isWarLogPublic?: string | undefined;
    warLeague?: ClanWarLeague | undefined;
    members?: number | undefined;
    memberList?: ClanMember[] | undefined;
    labels?: ClanLabel[] | undefined;
    requiredVersusTrophies?: number | undefined;
    requiredTownhallLevel?: number | undefined;
    clanCapital?: ClanCapital | undefined;
    chatLanguage?: ClanChatLanguage | undefined;
}

export class ClanWarLeague implements IClanWarLeague {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IClanWarLeague) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ClanWarLeague {
        data = typeof data === 'object' ? data : {};
        let result = new ClanWarLeague();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IClanWarLeague {
    id?: number | undefined;
    name?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
